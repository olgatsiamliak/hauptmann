<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Snippets' => 
    array (
      'c092c7d11bab46291db44ea70ba13430' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":0,"source":0,"property_preprocess":0,"name":"BabelLinks","description":"Displays links to translated resources.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * Babel\\n *\\n * Copyright 2010 by Jakob Class <jakob.class@class-zec.de>\\n *\\n * This file is part of Babel.\\n *\\n * Babel is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * Babel is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * Babel; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package babel\\n *\\/\\n\\/**\\n * BabelLinks snippet to display links to translated resources\\n *\\n * Based on ideas of Sylvain Aerni <enzyms@gmail.com>\\n *\\n * @author Jakob Class <jakob.class@class-zec.de>\\n *         goldsky <goldsky@virtudraft.com>\\n *\\n * @package babel\\n *\\n * @param resourceId        optional: id of resource of which links to translations should be displayed. Default: current resource\\n * @param tpl               optional: Chunk to display a language link. Default: babelLink\\n * @param activeCls         optional: CSS class name for the current active language. Default: active\\n * @param showUnpublished   optional: flag whether to show unpublished translations. Default: 0\\n * @param showCurrent       optional: flag whether to show a link to a translation of the current language. Default: 1\\n *\\/\\n$babel = $modx->getService(\'babel\',\'Babel\',$modx->getOption(\'babel.core_path\',null,$modx->getOption(\'core_path\').\'components\\/babel\\/\').\'model\\/babel\\/\',$scriptProperties);\\n\\n\\/* be sure babel and babel TV is loaded *\\/\\nif (!($babel instanceof Babel) || !$babel->babelTv) return;\\n\\n\\/* get snippet properties *\\/\\n$resourceId = intval($modx->getOption(\'resourceId\',$scriptProperties));\\nif (empty($resourceId)) {\\n    if (!empty($modx->resource) && is_object($modx->resource)) {\\n        $resourceId = $modx->resource->get(\'id\');\\n    } else {\\n        return;\\n    }\\n}\\n$tpl = $modx->getOption(\'tpl\',$scriptProperties,\'babelLink\');\\n$wrapperTpl = $modx->getOption(\'wrapperTpl\',$scriptProperties);\\n$activeCls = $modx->getOption(\'activeCls\',$scriptProperties,\'active\');\\n$showUnpublished = $modx->getOption(\'showUnpublished\',$scriptProperties,0);\\n$showCurrent = $modx->getOption(\'showCurrent\',$scriptProperties,0);\\n$outputSeparator = $modx->getOption(\'outputSeparator\',$scriptProperties,\\"\\\\n\\");\\n$includeUnlinked = $modx->getOption(\'includeUnlinked\',$scriptProperties,0);\\n$ignoreSiteStatus = $modx->getOption(\'ignoreSiteStatus\',$scriptProperties,0);\\n\\nif(!empty($modx->resource) && is_object($modx->resource) && $resourceId === $modx->resource->get(\'id\')) {\\n    $contextKeys = $babel->getGroupContextKeys($modx->resource->get(\'context_key\'));\\n    $resource = $modx->resource;\\n} else {\\n    $resource = $modx->getObject(\'modResource\', $resourceId);\\n    if(!$resource) {\\n        return;\\n    }\\n    $contextKeys = $babel->getGroupContextKeys($resource->get(\'context_key\'));\\n}\\n\\n$linkedResources = $babel->getLinkedResources($resourceId);\\n\\n$outputArray = array();\\nforeach($contextKeys as $contextKey) {\\n    if(!$showCurrent && $contextKey === $resource->get(\'context_key\')) {\\n        continue;\\n    }\\n    if (!$includeUnlinked && !isset($linkedResources[$contextKey])) {\\n        continue;\\n    }\\n    $context = $modx->getObject(\'modContext\', array(\'key\' => $contextKey));\\n    if(!$context) {\\n        $modx->log(modX::LOG_LEVEL_ERROR, \'Could not load context: \'.$contextKey);\\n        continue;\\n    }\\n    $context->prepare();\\n    if (!$context->getOption(\'site_status\', null, true) && !$ignoreSiteStatus) {\\n        continue;\\n    }\\n    $cultureKey = $context->getOption(\'cultureKey\',$modx->getOption(\'cultureKey\'));\\n    $translationAvailable = false;\\n    if(isset($linkedResources[$contextKey])) {\\n        $c = $modx->newQuery(\'modResource\');\\n        $c->where(array(\\n            \'id\' => $linkedResources[$contextKey],\\n            \'deleted:!=\' => 1,\\n            \'published:=\' => 1,\\n        ));\\n        if ($showUnpublished) {\\n            $c->where(array(\\n                \'OR:published:=\' => 0,\\n            ));\\n        }\\n        $count = $modx->getCount(\'modResource\',$c);\\n        if($count) {\\n            $translationAvailable = true;\\n        }\\n    }\\n    $getRequest = $_GET;\\n    unset($getRequest[\'id\']);\\n    unset($getRequest[$modx->getOption(\'request_param_alias\', null, \'q\')]);\\n    unset($getRequest[\'cultureKey\']);\\n    if($translationAvailable) {\\n        $url = $context->makeUrl($linkedResources[$contextKey],$getRequest,\'full\');\\n        $active = ($resource->get(\'context_key\') == $contextKey) ? $activeCls : \'\';\\n        $placeholders = array(\\n            \'cultureKey\' => $cultureKey,\\n            \'url\' => $url,\\n            \'active\' => $active,\\n            \'id\' => $linkedResources[$contextKey]\\n        );\\n\\n        if (!empty($toArray)) {\\n            $outputArray[] = $placeholders;\\n        } else {\\n            $chunk = $babel->getChunk($tpl,$placeholders);\\n            if(!empty($chunk)) {\\n                $outputArray[] = $chunk;\\n            }\\n        }\\n    } elseif ($includeUnlinked) {\\n        $url = $context->makeUrl($context->getOption(\'site_start\'),$getRequest,\'full\');\\n        $active = ($resource->get(\'context_key\') == $contextKey) ? $activeCls : \'\';\\n        $placeholders = array(\\n            \'cultureKey\' => $cultureKey,\\n            \'url\' => $url,\\n            \'active\' => $active,\\n            \'id\' => $context->getOption(\'site_start\')\\n        );\\n\\n        if (!empty($toArray)) {\\n            $outputArray[] = $placeholders;\\n        } else {\\n            $chunk = $babel->getChunk($tpl,$placeholders);\\n            if(!empty($chunk)) {\\n                $outputArray[] = $chunk;\\n            }\\n        }\\n    }\\n}\\n\\nif (!empty($toArray)) {\\n    return \'<pre>\'.  print_r($outputArray, 1).\'<\\/pre>\';\\n}\\n\\n$output = implode($outputSeparator, $outputArray);\\nif (!empty($wrapperTpl)) {\\n    $output = $babel->getChunk($wrapperTpl,array(\\n        \'babelLinks\' => $output\\n    ));\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $output);\\n    return;\\n}\\n\\nreturn $output;","locked":0,"properties":"a:6:{s:10:\\"resourceId\\";a:7:{s:4:\\"name\\";s:10:\\"resourceId\\";s:4:\\"desc\\";s:21:\\"babellinks.resourceId\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"babel:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:3:\\"tpl\\";a:7:{s:4:\\"name\\";s:3:\\"tpl\\";s:4:\\"desc\\";s:14:\\"babellinks.tpl\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:9:\\"babelLink\\";s:7:\\"lexicon\\";s:16:\\"babel:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"activeCls\\";a:7:{s:4:\\"name\\";s:9:\\"activeCls\\";s:4:\\"desc\\";s:20:\\"babellinks.activeCls\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:6:\\"active\\";s:7:\\"lexicon\\";s:16:\\"babel:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:15:\\"showUnpublished\\";a:7:{s:4:\\"name\\";s:15:\\"showUnpublished\\";s:4:\\"desc\\";s:26:\\"babellinks.showUnpublished\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:1:\\"0\\";s:7:\\"lexicon\\";s:16:\\"babel:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"showCurrent\\";a:7:{s:4:\\"name\\";s:11:\\"showCurrent\\";s:4:\\"desc\\";s:22:\\"babellinks.showCurrent\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:1:\\"0\\";s:7:\\"lexicon\\";s:16:\\"babel:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:15:\\"includeUnlinked\\";a:7:{s:4:\\"name\\";s:15:\\"includeUnlinked\\";s:4:\\"desc\\";s:26:\\"babellinks.includeUnlinked\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:1:\\"0\\";s:7:\\"lexicon\\";s:16:\\"babel:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * Babel\\n *\\n * Copyright 2010 by Jakob Class <jakob.class@class-zec.de>\\n *\\n * This file is part of Babel.\\n *\\n * Babel is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * Babel is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * Babel; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package babel\\n *\\/\\n\\/**\\n * BabelLinks snippet to display links to translated resources\\n *\\n * Based on ideas of Sylvain Aerni <enzyms@gmail.com>\\n *\\n * @author Jakob Class <jakob.class@class-zec.de>\\n *         goldsky <goldsky@virtudraft.com>\\n *\\n * @package babel\\n *\\n * @param resourceId        optional: id of resource of which links to translations should be displayed. Default: current resource\\n * @param tpl               optional: Chunk to display a language link. Default: babelLink\\n * @param activeCls         optional: CSS class name for the current active language. Default: active\\n * @param showUnpublished   optional: flag whether to show unpublished translations. Default: 0\\n * @param showCurrent       optional: flag whether to show a link to a translation of the current language. Default: 1\\n *\\/\\n$babel = $modx->getService(\'babel\',\'Babel\',$modx->getOption(\'babel.core_path\',null,$modx->getOption(\'core_path\').\'components\\/babel\\/\').\'model\\/babel\\/\',$scriptProperties);\\n\\n\\/* be sure babel and babel TV is loaded *\\/\\nif (!($babel instanceof Babel) || !$babel->babelTv) return;\\n\\n\\/* get snippet properties *\\/\\n$resourceId = intval($modx->getOption(\'resourceId\',$scriptProperties));\\nif (empty($resourceId)) {\\n    if (!empty($modx->resource) && is_object($modx->resource)) {\\n        $resourceId = $modx->resource->get(\'id\');\\n    } else {\\n        return;\\n    }\\n}\\n$tpl = $modx->getOption(\'tpl\',$scriptProperties,\'babelLink\');\\n$wrapperTpl = $modx->getOption(\'wrapperTpl\',$scriptProperties);\\n$activeCls = $modx->getOption(\'activeCls\',$scriptProperties,\'active\');\\n$showUnpublished = $modx->getOption(\'showUnpublished\',$scriptProperties,0);\\n$showCurrent = $modx->getOption(\'showCurrent\',$scriptProperties,0);\\n$outputSeparator = $modx->getOption(\'outputSeparator\',$scriptProperties,\\"\\\\n\\");\\n$includeUnlinked = $modx->getOption(\'includeUnlinked\',$scriptProperties,0);\\n$ignoreSiteStatus = $modx->getOption(\'ignoreSiteStatus\',$scriptProperties,0);\\n\\nif(!empty($modx->resource) && is_object($modx->resource) && $resourceId === $modx->resource->get(\'id\')) {\\n    $contextKeys = $babel->getGroupContextKeys($modx->resource->get(\'context_key\'));\\n    $resource = $modx->resource;\\n} else {\\n    $resource = $modx->getObject(\'modResource\', $resourceId);\\n    if(!$resource) {\\n        return;\\n    }\\n    $contextKeys = $babel->getGroupContextKeys($resource->get(\'context_key\'));\\n}\\n\\n$linkedResources = $babel->getLinkedResources($resourceId);\\n\\n$outputArray = array();\\nforeach($contextKeys as $contextKey) {\\n    if(!$showCurrent && $contextKey === $resource->get(\'context_key\')) {\\n        continue;\\n    }\\n    if (!$includeUnlinked && !isset($linkedResources[$contextKey])) {\\n        continue;\\n    }\\n    $context = $modx->getObject(\'modContext\', array(\'key\' => $contextKey));\\n    if(!$context) {\\n        $modx->log(modX::LOG_LEVEL_ERROR, \'Could not load context: \'.$contextKey);\\n        continue;\\n    }\\n    $context->prepare();\\n    if (!$context->getOption(\'site_status\', null, true) && !$ignoreSiteStatus) {\\n        continue;\\n    }\\n    $cultureKey = $context->getOption(\'cultureKey\',$modx->getOption(\'cultureKey\'));\\n    $translationAvailable = false;\\n    if(isset($linkedResources[$contextKey])) {\\n        $c = $modx->newQuery(\'modResource\');\\n        $c->where(array(\\n            \'id\' => $linkedResources[$contextKey],\\n            \'deleted:!=\' => 1,\\n            \'published:=\' => 1,\\n        ));\\n        if ($showUnpublished) {\\n            $c->where(array(\\n                \'OR:published:=\' => 0,\\n            ));\\n        }\\n        $count = $modx->getCount(\'modResource\',$c);\\n        if($count) {\\n            $translationAvailable = true;\\n        }\\n    }\\n    $getRequest = $_GET;\\n    unset($getRequest[\'id\']);\\n    unset($getRequest[$modx->getOption(\'request_param_alias\', null, \'q\')]);\\n    unset($getRequest[\'cultureKey\']);\\n    if($translationAvailable) {\\n        $url = $context->makeUrl($linkedResources[$contextKey],$getRequest,\'full\');\\n        $active = ($resource->get(\'context_key\') == $contextKey) ? $activeCls : \'\';\\n        $placeholders = array(\\n            \'cultureKey\' => $cultureKey,\\n            \'url\' => $url,\\n            \'active\' => $active,\\n            \'id\' => $linkedResources[$contextKey]\\n        );\\n\\n        if (!empty($toArray)) {\\n            $outputArray[] = $placeholders;\\n        } else {\\n            $chunk = $babel->getChunk($tpl,$placeholders);\\n            if(!empty($chunk)) {\\n                $outputArray[] = $chunk;\\n            }\\n        }\\n    } elseif ($includeUnlinked) {\\n        $url = $context->makeUrl($context->getOption(\'site_start\'),$getRequest,\'full\');\\n        $active = ($resource->get(\'context_key\') == $contextKey) ? $activeCls : \'\';\\n        $placeholders = array(\\n            \'cultureKey\' => $cultureKey,\\n            \'url\' => $url,\\n            \'active\' => $active,\\n            \'id\' => $context->getOption(\'site_start\')\\n        );\\n\\n        if (!empty($toArray)) {\\n            $outputArray[] = $placeholders;\\n        } else {\\n            $chunk = $babel->getChunk($tpl,$placeholders);\\n            if(!empty($chunk)) {\\n                $outputArray[] = $chunk;\\n            }\\n        }\\n    }\\n}\\n\\nif (!empty($toArray)) {\\n    return \'<pre>\'.  print_r($outputArray, 1).\'<\\/pre>\';\\n}\\n\\n$output = implode($outputSeparator, $outputArray);\\nif (!empty($wrapperTpl)) {\\n    $output = $babel->getChunk($wrapperTpl,array(\\n        \'babelLinks\' => $output\\n    ));\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $output);\\n    return;\\n}\\n\\nreturn $output;"}',
        'guid' => 'fb69e335befe6c464299d24595adc9fd',
        'native_key' => 0,
        'signature' => 'd81fd27627fc05022601fd847f16188d',
      ),
      'c77015db8b4f99660590a2d50621c9c3' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":0,"source":0,"property_preprocess":0,"name":"BabelTranslation","description":"Returns the id of a translated resource in a given context.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * Babel\\n *\\n * Copyright 2010 by Jakob Class <jakob.class@class-zec.de>\\n *\\n * This file is part of Babel.\\n *\\n * Babel is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * Babel is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * Babel; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package babel\\n *\\/\\n\\/**\\n * BabelTranslation snippet to get the id of a translated resource in a given context.\\n *\\n * @author Jakob Class <jakob.class@class-zec.de>\\n *\\n * @package babel\\n *\\n * @param resourceId\\t\\toptional: id of resource of which a translated resource should be determined. Default: current resource\\n * @param contextKey\\t\\toptional: Key of context in which translated resource should be determined.\\n * @param cultureKey\\t\\toptional: Key of culture in which translated resource should be determined. Used only in case contextKey was not specified.  If both omitted: uses currently set cultureKey.\\n * @param showUnpublished\\toptional: flag whether to show unpublished translations. Default: 0\\n *\\/\\n$babel = $modx->getService(\'babel\', \'Babel\', $modx->getOption(\'babel.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/babel\\/\') . \'model\\/babel\\/\', $scriptProperties);\\n\\n\\/* be sure babel and babel TV is loaded *\\/\\nif (!($babel instanceof Babel) || !$babel->babelTv)\\n    return;\\n\\n\\/* get snippet properties *\\/\\n$resourceId = intval($modx->getOption(\'resourceId\', $scriptProperties));\\nif (empty($resourceId)) {\\n    if (!empty($modx->resource) && is_object($modx->resource)) {\\n        $resourceId = $modx->resource->get(\'id\');\\n    } else {\\n        return;\\n    }\\n}\\n$contextKey = $modx->getOption(\'contextKey\', $scriptProperties, \'\');\\nif (empty($contextKey)) {\\n    $cultureKey = $modx->getOption(\'cultureKey\', $scriptProperties, \'\');\\n    $contextKey = $babel->getContextKey($cultureKey);\\n}\\n$showUnpublished = $modx->getOption(\'showUnpublished\', $scriptProperties, 0);\\n\\n\\/* determine id of tranlated resource *\\/\\n$linkedResources = $babel->getLinkedResources($resourceId);\\n$output = null;\\nif (isset($linkedResources[$contextKey])) {\\n    $resource = $modx->getObject(\'modResource\', $linkedResources[$contextKey]);\\n    if ($resource && ($showUnpublished || $resource->get(\'published\') == 1)) {\\n        $output = $resource->get(\'id\');\\n    }\\n}\\nreturn $output;","locked":0,"properties":"a:4:{s:10:\\"resourceId\\";a:7:{s:4:\\"name\\";s:10:\\"resourceId\\";s:4:\\"desc\\";s:27:\\"babeltranslation.resourceId\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"babel:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"contextKey\\";a:7:{s:4:\\"name\\";s:10:\\"contextKey\\";s:4:\\"desc\\";s:27:\\"babeltranslation.contextKey\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"babel:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"cultureKey\\";a:7:{s:4:\\"name\\";s:10:\\"cultureKey\\";s:4:\\"desc\\";s:27:\\"babeltranslation.cultureKey\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"babel:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:15:\\"showUnpublished\\";a:7:{s:4:\\"name\\";s:15:\\"showUnpublished\\";s:4:\\"desc\\";s:32:\\"babeltranslation.showUnpublished\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:1:\\"0\\";s:7:\\"lexicon\\";s:16:\\"babel:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * Babel\\n *\\n * Copyright 2010 by Jakob Class <jakob.class@class-zec.de>\\n *\\n * This file is part of Babel.\\n *\\n * Babel is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * Babel is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * Babel; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package babel\\n *\\/\\n\\/**\\n * BabelTranslation snippet to get the id of a translated resource in a given context.\\n *\\n * @author Jakob Class <jakob.class@class-zec.de>\\n *\\n * @package babel\\n *\\n * @param resourceId\\t\\toptional: id of resource of which a translated resource should be determined. Default: current resource\\n * @param contextKey\\t\\toptional: Key of context in which translated resource should be determined.\\n * @param cultureKey\\t\\toptional: Key of culture in which translated resource should be determined. Used only in case contextKey was not specified.  If both omitted: uses currently set cultureKey.\\n * @param showUnpublished\\toptional: flag whether to show unpublished translations. Default: 0\\n *\\/\\n$babel = $modx->getService(\'babel\', \'Babel\', $modx->getOption(\'babel.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/babel\\/\') . \'model\\/babel\\/\', $scriptProperties);\\n\\n\\/* be sure babel and babel TV is loaded *\\/\\nif (!($babel instanceof Babel) || !$babel->babelTv)\\n    return;\\n\\n\\/* get snippet properties *\\/\\n$resourceId = intval($modx->getOption(\'resourceId\', $scriptProperties));\\nif (empty($resourceId)) {\\n    if (!empty($modx->resource) && is_object($modx->resource)) {\\n        $resourceId = $modx->resource->get(\'id\');\\n    } else {\\n        return;\\n    }\\n}\\n$contextKey = $modx->getOption(\'contextKey\', $scriptProperties, \'\');\\nif (empty($contextKey)) {\\n    $cultureKey = $modx->getOption(\'cultureKey\', $scriptProperties, \'\');\\n    $contextKey = $babel->getContextKey($cultureKey);\\n}\\n$showUnpublished = $modx->getOption(\'showUnpublished\', $scriptProperties, 0);\\n\\n\\/* determine id of tranlated resource *\\/\\n$linkedResources = $babel->getLinkedResources($resourceId);\\n$output = null;\\nif (isset($linkedResources[$contextKey])) {\\n    $resource = $modx->getObject(\'modResource\', $linkedResources[$contextKey]);\\n    if ($resource && ($showUnpublished || $resource->get(\'published\') == 1)) {\\n        $output = $resource->get(\'id\');\\n    }\\n}\\nreturn $output;"}',
        'guid' => '3da61f23c7dabb9ea2dfe6c784266c11',
        'native_key' => 0,
        'signature' => '0bfd9852b954f87f727220a42a8edb11',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
  ),
  'namespace' => 'babel',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"babel-3.0.0-rc1\\/modCategory\\/923732e836f70e9bc557b9ba6ce9f7dd\\/0\\/","target":"return MODX_ASSETS_PATH . \'components\\/\';","name":"babel"}',
    ),
    1 => 
    array (
      'type' => 'file',
      'body' => '{"source":"babel-3.0.0-rc1\\/modCategory\\/923732e836f70e9bc557b9ba6ce9f7dd\\/1\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"babel"}',
    ),
    2 => 
    array (
      'type' => 'php',
      'body' => '{"source":"babel-3.0.0-rc1\\/modCategory\\/923732e836f70e9bc557b9ba6ce9f7dd.setupoptions.resolver.resolver","type":"php","name":"setupoptions.resolver"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '8d9fdd785645569fc843962642215b3d',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => '923732e836f70e9bc557b9ba6ce9f7dd',
  'native_key' => 1,
  'object' => '{"id":1,"parent":0,"category":"Babel","rank":0}',
);